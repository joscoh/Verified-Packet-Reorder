#ifndef TCP_SEMANTICS_INCLUDED
#define TCP_SEMANTICS_INCLUDED

#include "tcp_type.gh"

//TCP/IP Reordering + Semantics

/* Comparison */

// We cannot faithfully prove the cmp function correct because it uses intentional overflow, which Verifast cannot handle. We could
// provide a definition which is correct, but we don't need the definition anywhere; we only need to know that this function satisfies
// a few properties. We prove these properties correct in Coq based on the C code, since VST can handle overflow.
// Therefore, we leave cmp opaque and give the needed properties as axioms.

fixpoint int cmp(int a, int b);

// cmp is not a true comparison because of wraparound. But it works correctly if, for all elements x and y, |x-y| < 2^31 or for all x, y, |x-y| >= 2^31
// (we proved this in Coq). To make things simpler, we assume here that all elements are in the range [0, 2^31-1] (ie: positive signed integers).

// x is in the range [0, 2^31-1]
fixpoint bool inrange(int x) {
	return (0 <= x) && (x <= 2147483647);
}

lemma void cmp_same(int a);
requires true;
ensures cmp(a, a) == 0;

lemma void cmp_inj(int a, int b);
requires (0 <= a) && (a <= 4294967295) && (0 <= b) && (b <= 4294967295) && cmp(a,b) == 0;
ensures a == b;

lemma void cmp_antisym1(int a, int b);
requires inrange(a) == true && inrange(b) == true && cmp(a,b) > 0;
ensures cmp(b,a) < 0; 

lemma void cmp_antisym2(int a, int b);
requires inrange(a) == true && inrange(b) == true && cmp(a,b) < 0;
ensures cmp(b,a) > 0; 

lemma void cmp_ge_trans(int a, int b, int c);
requires inrange(a) == true && inrange(b) == true && inrange(c) == true && cmp(a, b) >= 0 && cmp(b, c) >= 0;
ensures cmp(a, c) >= 0; 

lemma void cmp_gt_trans(int a, int b, int c);
requires inrange(a) == true && inrange(b) == true && inrange(c) == true && cmp(a, b) > 0 && cmp(b, c) > 0;
ensures cmp(a, c) > 0; 

//We can prove this one
lemma void cmp_gt_ge_trans(int a, int b, int c)
requires inrange(a) == true && inrange(b) == true && inrange(c) == true && cmp(a, b) > 0 && cmp(b, c) >= 0;
ensures cmp(a, c) > 0; 
{
	if(cmp(b, c) == 0) {
		cmp_inj(b, c);
	} 
	else {
		cmp_gt_trans(a, b, c);
	}
	
	
}

/* 
Expected Sequence Number

In the reorderer, the expected sequence number describes the next byte that has not yet been fully processed; ie: all bytes before exp_seq have been
processed in order (inserted and popped from the reorderer). Different type of packets will trigger different events that update the expected
sequence number based on the TCP semantics. The following type describes these events: 
*/

inductive tcp_reorder_effect = r_ignore | r_syn | r_ack | r_fin | r_rst | r_data | r_retransmit;

/*
How do we know what packet should trigger which effect?
The semantics of these effects are as follows:
1. If the packet type is SYN, this packet starts the flow, so it has effect r_syn.
2. If the packet type is ACK and it has no data, it has effect r_ack. We don't need to worry about sequence number comparison here, since this packet does not
	effect the sequence numbers at all. When popped, we don't need to update anything no matter what.
3. If the packet has an earlier sequence number than expected, it has type r_retransmit. This refers to data that has been duplicated in some way.
Note that these would not be FIN or RST packets, since they would close the connection, making the sender unable to send data again.
4. If the packet type is FIN or RST, it has effect r_fin or r_rst, respectively
5. Otherwise, the packet is data and has type r_data
6. r_ignore only results from an ill-formed or problematic packet
*/
//NOTE: RST-ACK packets are treated as ACK packets by the code. This doesn't cause problems, since both of these packets do not change expected sequence number, but it is probably a mistake.
fixpoint tcp_reorder_effect get_reorder_effect(tcp_type ty, int plen, int seq, int exp_seq) {
	return 
	((ty == syn || ty == syn_ack) ? r_syn :
	((ty == ack || ty == rst_ack) && plen == 0 ? r_ack :
	(cmp(exp_seq, seq) > 0 ? r_retransmit : 
	((ty == fin || ty == fin_ack) ? r_fin :
	((ty == rst || ty == rst_ack) ? r_rst : r_data)))));
}

/* Next, we need to describe how the expected sequence number should be updated with each event. The semantics, based on RFC-793 and the definition of the expected
sequence number, are as follows:
1. If seq (the current sequence number) > exp_seq, there is a gap, and we should not update anything; we cannot process more bytes in order.
1. A SYN packet (r_syn) or FIN packet (f_fin) increases the sequence number by 1 (data is ignored).
2. An RST data does not affect the expected sequence number, since it closes the connection and no more data will be receieved.
3. Suppose the expected sequence number is exp_seq, and the packet has effect r_retransmit with sequence number seq and length plen. Because of the effect (and since 
	the expected sequence number is strictly increasing) exp_seq > seq. If seq + plen < exp_seq, we do not change the expected sequence (still, the same number of 
	bytes are complete). Otherwise, update exp_seq to seq + plen, since now all bytes before have been processed.
4. Otherwise (r_ack or r_data), updated exp_seq to be seq + plen. For an r_ack, plen = 0, so there is no change (which is correct; ACK packets do not change sequence numbers).
	We know that seq <= exp_seq, so it is safe to update exp_seq to be seq+plen (all bytes will have been processed). */
	
fixpoint int update_exp_seq(tcp_reorder_effect ev, int plen, int seq, int exp_seq) {
	return
	((cmp(seq, exp_seq) > 0 || ev == r_rst || ev == r_ack || ev == r_ignore) ? exp_seq : //r_ignore should not occur but we add it for completeness; it shouldn't change the sequence number
	(ev == r_syn || ev == r_fin ? exp_seq + 1 :
	(ev == r_retransmit ? (cmp(seq + plen, exp_seq) > 0 ? seq + plen : exp_seq) :
	seq + plen)));
}

//NOTE: THIS IS UNSOUND, but because we are fudging sequence numbers anyway, we assume that all sequence numbers, including expected, are in signed integer range
lemma void update_exp_seq_inrange(tcp_reorder_effect ev, int plen, int seq, int exp_seq);
requires inrange(seq) == true && inrange(exp_seq) == true;
ensures inrange(update_exp_seq(ev, plen, seq, exp_seq)) == true;

#endif